package com.pdfcreator.creator;

import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.text.SimpleDateFormat;
import java.util.Date;

import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Font;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;

public class CreatorClass {

	private static Font TIME_ROMAN = new Font(Font.FontFamily.TIMES_ROMAN, 18, Font.BOLD);
	private static Font TIME_ROMAN_SMALL = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD);

	public static Document createPDF(String file, String mail, String name, String password) {

		Document document = null;

		try {
			document = new Document();
			PdfWriter.getInstance(document, new FileOutputStream(file));
			document.open();

			addMetaData(document);

			addTitlePage(document);

			createTable(document,mail, name, password );

			document.close();

		} catch (FileNotFoundException e) {

			e.printStackTrace();
		} catch (DocumentException e) {
			e.printStackTrace();
		}
		return document;

	}

	private static void addMetaData(Document document) {
		document.addTitle("sample report generated by KK");
		document.addSubject("sample report");
		document.addAuthor("Karthikeyan");
		document.addCreator("Karthikeyan");
	}

	private static void addTitlePage(Document document) throws DocumentException {

		Paragraph preface = new Paragraph();
		creteEmptyLine(preface, 1);
		preface.add(new Paragraph("Details", TIME_ROMAN));

		creteEmptyLine(preface, 1);
		SimpleDateFormat simpleDateFormat = new SimpleDateFormat("MM/dd/yyyy");
		preface.add(new Paragraph("Report created on " + simpleDateFormat.format(new Date()), TIME_ROMAN_SMALL));
		document.add(preface);

	}

	private static void creteEmptyLine(Paragraph paragraph, int number) {
		for (int i = 0; i < number; i++) {
			paragraph.add(new Paragraph(" "));
		}
	}

	private static void createTable(Document document, String mail, String name , String password) throws DocumentException {
		Paragraph paragraph = new Paragraph();
		creteEmptyLine(paragraph, 3);
		document.add(paragraph);
		PdfPTable table = new PdfPTable(3);

		/*
		 * PdfPCell c1 = new PdfPCell(new Phrase("First Name"));
		 * c1.setHorizontalAlignment(Element.ALIGN_CENTER); table.addCell(c1);
		 * 
		 * c1 = new PdfPCell(new Phrase("Last Name"));
		 * c1.setHorizontalAlignment(Element.ALIGN_CENTER); table.addCell(c1);
		 * 
		 * c1 = new PdfPCell(new Phrase("Test"));
		 * c1.setHorizontalAlignment(Element.ALIGN_CENTER); table.addCell(c1);
		 * //table.setHeaderRows(1);
		 * 
		 * for (int i = 0; i < 5; i++) { table.setWidthPercentage(100);
		 * table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		 * table.getDefaultCell().setVerticalAlignment(Element.ALIGN_MIDDLE);
		 * table.addCell("Java"); table.addCell("Honk"); table.addCell("Success"); }
		 */

		// Create cells
		PdfPCell cell1 = new PdfPCell(new Paragraph("username"));
		PdfPCell cell2 = new PdfPCell(new Paragraph("password"));
		PdfPCell cell3 = new PdfPCell(new Paragraph("Mail"));
		PdfPCell cell4 = new PdfPCell(new Paragraph(name));
		PdfPCell cell5 = new PdfPCell(new Paragraph(password));
		PdfPCell cell6 = new PdfPCell(new Paragraph(mail));

		// Add cells in table
		table.addCell(cell1);
		table.addCell(cell2);
		table.addCell(cell3);
		table.addCell(cell4);
		table.addCell(cell5);
		table.addCell(cell6);

		document.add(table);
	}

}
